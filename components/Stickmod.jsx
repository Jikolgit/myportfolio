/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/stickmod.glb 
*/
import * as THREE from 'three'
import React, { useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber';

export function Model(props) {
  const { nodes, materials } = useGLTF('/stickmod.glb');
  let planeMat = useRef(new THREE.MeshBasicMaterial({color:'red',visible:false,side:THREE.DoubleSide}))
  let circleRef = useRef(null);
  let stickOne = useRef([]);
  let stickArr = [];
  let hoverArr=[];
  let linePosition = 40;
  let lineNumber = 35;
  let xPoseRef = useRef([]);
  let zPoseRef = useRef([]);
  let randomColor = useRef([]);
  let setOnce = useRef(false)
  let [hoveredOne, setHoverOne] = useState(false);

  if(!setOnce.current)
  {
    setOnce.current = true;
    for(let i =0; i<lineNumber;i++)
    {
        hoverArr[i] = false
        xPoseRef.current[i] = Math.floor(Math.random() * (linePosition*2)) - linePosition;
        zPoseRef.current[i] = Math.floor(Math.random() * (linePosition*2)) - linePosition;
        randomColor.current[i] = Math.floor(Math.random() * 3);
      
    }
  }
  let [hovered, setHover] = useState([...hoverArr]);
  
  for(let i =0; i<25;i++)
  {

    stickArr[i] = <mesh onPointerOver={()=>{setHoverStick(i,true)}} onPointerOut={()=>{setHoverStick(i,false)}} key={i} geometry={nodes.sitck_1.geometry}  position={[xPoseRef.current[i], 0, zPoseRef.current[i]]}>
                              <meshBasicMaterial color={hovered[i]? 'white' : '#555963'} />
                              <mesh geometry={nodes.bubble_1.geometry} material={nodes.bubble_1.material} position={[0, -51.947, 0]} >
                                  {randomColor.current[i] == 0 && <meshBasicMaterial color={new THREE.Color(1,0,0)} />}
                                  {randomColor.current[i] == 1 && <meshBasicMaterial color={new THREE.Color(0,1,0)} />}
                                  {randomColor.current[i] == 2 && <meshBasicMaterial color={new THREE.Color(0,0,1)} />}
                              </mesh>
                          </mesh>

  }


  let setHoverStick = (index,state) =>
  {
    
      let hoverArrSample = hovered;
      hoverArrSample[index] = state;
      setHover([...hoverArrSample]);
  }

  // setHover([...hoverArr])
  useEffect(()=>
  {  
    // circleRef.current.rotation.z = -Math.PI*0.25 Math.floor(Math.random() * 10) rotation={[Math.PI*0.35,0,0]}
  },[])
  useFrame(()=>
  {
    circleRef.current.rotation.y += (1/2000)
  })
  return (
    <group {...props} dispose={null}>
      <mesh rotation={[Math.PI*0.20,0,0]} ref={circleRef} 
      geometry={nodes.Plane.geometry} material={planeMat.current} 
      position={[60, 70, 40]} scale={2}>
        
        {stickArr}
      </mesh>
    </group>
  )
}

useGLTF.preload('/stickmod.glb')
